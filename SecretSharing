import org.json.JSONObject;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;
import java.util.TreeMap;

public class SecretSharing {

    public static void main(String[] args) {
        try {
            // Read the JSON input file
            String jsonString = new String(Files.readAllBytes(Paths.get("input.json")));
            JSONObject jsonObject = new JSONObject(jsonString);

            // Parse the 'keys' object
            JSONObject keys = jsonObject.getJSONObject("keys");
            int n = keys.getInt("n");
            int k = keys.getInt("k");
            int m = k - 1;

            // Parse each root and decode y-values
            Map<Integer, Integer> points = new TreeMap<>();
            for (String key : jsonObject.keySet()) {
                if (!key.equals("keys")) {
                    JSONObject point = jsonObject.getJSONObject(key);
                    int x = Integer.parseInt(key);
                    int base = point.getInt("base");
                    String value = point.getString("value");
                    int y = Integer.parseInt(value, base);
                    points.put(x, y);
                }
            }

            // Calculate the constant term (c) using Lagrange interpolation
            int secret = calculateConstantTerm(points, m);
            System.out.println("The secret constant term (c) is: " + secret);

        } catch (IOException e) {
            System.err.println("Error reading JSON file: " + e.getMessage());
        }
    }

    // Function to calculate the constant term using Lagrange interpolation
    private static int calculateConstantTerm(Map<Integer, Integer> points, int m) {
        int c = 0;
        int mod = (int) Math.pow(2, 256);  // Set modulus for large integer arithmetic

        int i = 0;
        for (Map.Entry<Integer, Integer> p : points.entrySet()) {
            if (i++ >= m + 1) break;  // Use only first m+1 points

            int xi = p.getKey();
            int yi = p.getValue();

            int li = 1;  // Lagrange basis polynomial
            for (Map.Entry<Integer, Integer> q : points.entrySet()) {
                if (!q.getKey().equals(xi)) {
                    int xj = q.getKey();
                    li *= (xj * modInverse(xj - xi, mod)) % mod;
                    li %= mod;
                }
            }
            c += (yi * li) % mod;
            c %= mod;
        }
        return c < 0 ? c + mod : c;  // Adjust for negative values
    }

    // Function to calculate modular inverse using Extended Euclidean Algorithm
    private static int modInverse(int a, int mod) {
        int m0 = mod, y = 0, x = 1;
        while (a > 1) {
            int q = a / mod;
            int t = mod;
            mod = a % mod;
            a = t;
            t = y;
            y = x - q * y;
            x = t;
        }
        return x < 0 ? x + m0 : x;
    }
}
